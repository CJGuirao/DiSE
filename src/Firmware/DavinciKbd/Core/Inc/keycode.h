/* This file is automatically generated. */
#ifndef KEYCODE_KEYCODE_H
#define KEYCODE_KEYCODE_H

/* HID keycode definitions. These keycodes are portable, and correspond to
   locations on the keyboard. For example, the keycode KEY_A corresponds to the
   "A" key on US keyboard layouts, but KEY_A corresponds to the "Q" key on
   French keyboard layouts. In either case, KEY_A is in the same physical
   location on the keyboard.

   Platform-specific scancodes can be converted to the HID keycodes defined
   here, see keytable.h. All keycodes which can be generated on at least one
   platform are included here, but not all platforms will produce all keycodes.
   The names of these keycodes are taken, with some modifications, from the HID
   usage tables. Key codes starting with KEY are general keys, and the keys on
   the numeric keypad have key codes starting with KP. */
enum {
    /* Zero, does not correspond to any key. */
    KEY_None = 0,

    /* Keycode definitions. */
    KEY_A = 4,
    KEY_B = 5,
    KEY_C = 6,
    KEY_D = 7,
    KEY_E = 8,
    KEY_F = 9,
    KEY_G = 10,
    KEY_H = 11,
    KEY_I = 12,
    KEY_J = 13,
    KEY_K = 14,
    KEY_L = 15,
    KEY_M = 16,
    KEY_N = 17,
    KEY_O = 18,
    KEY_P = 19,
    KEY_Q = 20,
    KEY_R = 21,
    KEY_S = 22,
    KEY_T = 23,
    KEY_U = 24,
    KEY_V = 25,
    KEY_W = 26,
    KEY_X = 27,
    KEY_Y = 28,
    KEY_Z = 29,
    KEY_1 = 30,
    KEY_2 = 31,
    KEY_3 = 32,
    KEY_4 = 33,
    KEY_5 = 34,
    KEY_6 = 35,
    KEY_7 = 36,
    KEY_8 = 37,
    KEY_9 = 38,
    KEY_0 = 39,
    KEY_Escape = 41,
    KEY_Delete = 42,
    KEY_Tab = 43,
    KEY_Space = 44,
    KEY_Minus = 45,
    KEY_Equals = 46,
    KEY_LeftBracket = 47,
    KEY_RightBracket = 48,
    KEY_Backslash = 49,
    KEY_Semicolon = 51,
    KEY_Quote = 52,
    KEY_Grave = 53,
    KEY_Comma = 54,
    KEY_Period = 55,
    KEY_Slash = 56,
    KEY_CapsLock = 57,
    KEY_F1 = 58,
    KEY_F2 = 59,
    KEY_F3 = 60,
    KEY_F4 = 61,
    KEY_F5 = 62,
    KEY_F6 = 63,
    KEY_F7 = 64,
    KEY_F8 = 65,
    KEY_F9 = 66,
    KEY_F10 = 67,
    KEY_F11 = 68,
    KEY_F12 = 69,
    KEY_PrintScreen = 70,
    KEY_ScrollLock = 71,
    KEY_Pause = 72,
    KEY_Insert = 73,
    KEY_Home = 74,
    KEY_PageUp = 75,
    KEY_DeleteForward = 76,
    KEY_End = 77,
    KEY_PageDown = 78,
    KEY_Right = 79,
    KEY_Left = 80,
    KEY_Down = 81,
    KEY_Up = 82,
    KP_NumLock = 83,
    KP_Divide = 84,
    KP_Multiply = 85,
    KP_Subtract = 86,
    KP_Add = 87,
    KP_Enter = 88,
    KP_1 = 89,
    KP_2 = 90,
    KP_3 = 91,
    KP_4 = 92,
    KP_5 = 93,
    KP_6 = 94,
    KP_7 = 95,
    KP_8 = 96,
    KP_9 = 97,
    KP_0 = 98,
    KP_Point = 99,
    KEY_NonUSBackslash = 100,
    KP_Equals = 103,
    KEY_F13 = 104,
    KEY_F14 = 105,
    KEY_F15 = 106,
    KEY_F16 = 107,
    KEY_F17 = 108,
    KEY_F18 = 109,
    KEY_F19 = 110,
    KEY_F20 = 111,
    KEY_F21 = 112,
    KEY_F22 = 113,
    KEY_F23 = 114,
    KEY_F24 = 115,
    KEY_Help = 117,
    KEY_Menu = 118,
    KEY_Mute = 127,
    KEY_SysReq = 154,
    KEY_Return = 158,
    KP_Clear = 216,
    KP_Decimal = 220,
    KEY_LeftControl = 224,
    KEY_LeftShift = 225,
    KEY_LeftAlt = 226,
    KEY_LeftGUI = 227,
    KEY_RightControl = 228,
    KEY_RightShift = 229,
    KEY_RightAlt = 230,
    KEY_RightGUI = 231,
};

#define IS_KEY_SPECIAL(X) ((X) >= KEY_Special_S1)

#define KEY_MOD_CTRL_L    0x01
#define KEY_MOD_SHIFT_L   0x02
#define KEY_MOD_ALT_L     0x04
#define KEY_MOD_GUI_L     0x08
#define KEY_MOD_CTRL_R    0x10
#define KEY_MOD_SHIFT_R   0x20
#define KEY_MOD_ALT_R     0x40
#define KEY_MOD_GUI_R     0x80


#define ALT_TYPE_NONE           0
#define ALT_TYPE_TOGGLE         1
#define ALT_TYPE_LONGPRESS      2
#define ALT_TYPE_KEYUP          3
#define ALT_TYPE_DOUBLE_CLICK   4

#define JOG_SELL_MASK     0x0F
#define JOG_SELL_TEMP     0x10


typedef struct
{
	uint8_t code;
	uint8_t modifiers;
	uint8_t group;
	uint8_t alt_type;
	uint8_t alt_code;
	uint8_t alt_modifiers;
	uint8_t jog_sel;
	uint8_t reserved;
} sKbdCodeData;

typedef struct
{
	uint8_t code;
	uint8_t modifiers;
	uint8_t rate1;     // rpm rate for standard jog, minimum rate (cps) in shuttle mode
	uint8_t rate2;     // decimation in standard jog, maximum rate (cps) in shuttle mode
} sJogCodeData;

//#define KEY_STATE_NONE              0x00
#define KEY_STATE_RELEASED          0x00
#define KEY_STATE_PRESSED           0x01
#define KEY_STATE_LONG_PRESS        0x02
#define KEY_STATE_DBL_PRESSED       0x03
#define KEY_STATE_DBL_RELEASED      0x04


#define MAX_MSG_LEN CUSTOM_HID_EPIN_SIZE   // 64
#define MAX_KEY_ACTIONS 8   // must be less then (MAX_MSG_LEN - 2) / 2

#define MSG_SET_KEY      	0x01
#define MSG_GET_KEY      	0x02
#define MSG_SAVE_SETTINGS	0x03
#define MSG_SET_JOG_DATA	0x04
#define MSG_GET_JOG_DATA	0x05
#define MSG_SET_JOG_TYPE	0x06
#define MSG_GET_JOG_TYPE	0x07
#define MSG_FACTORY_DEFAULT	0x08
#define MSG_GET_VERSION     0x09

#define MSG_KEY_DATA     	0x41
#define MSG_KEY_ACTIONS     0x42
#define MSG_SAVE_RESULT 	0x43
#define MSG_JOG_DATA    	0x44
#define MSG_JOG_TYPE	 	0x45
#define MSG_VERSION	    	0x46


typedef struct
{
	uint8_t cmd;
	uint8_t datalen;
	uint8_t keyid;
	uint8_t keycode;
	uint8_t modifiers;
	uint8_t group;
	uint8_t alt_type;
	uint8_t alt_code;
	uint8_t alt_modifiers;
	uint8_t jog_sel;
} sMsgKeyData;

typedef struct
{
	uint8_t cmd;
	uint8_t datalen;
	uint8_t mode;          // one of 3 modes (0 - 2)
	uint8_t rate_select;   // one of 3 rates (0 - 2)
	uint8_t dir;           // 0 = cw, 1 = ccw
	uint8_t keycode;
	uint8_t modifiers;
	uint8_t rate1;
	uint8_t rate2;
} sMsgJogData;

typedef struct
{
	uint8_t cmd;
	uint8_t datalen;
	uint8_t mode;   // one of 3 modes (0 - 2)
	uint8_t type;   // 0 = normal, 1 = shuttle mode
} sMsgJogType;

typedef struct
{
	uint8_t cmd;
	uint8_t datalen;
	uint8_t mode;   // one of 3 modes (0 - 2)
} sMsgGetJogType;

typedef struct
{
	uint8_t cmd;
	uint8_t datalen;
	uint8_t keyid;
} sMsgGetKey;

typedef struct
{
	uint8_t cmd;
	uint8_t datalen;
	uint8_t mode;   // one of 3 modes (0 - 2)
	uint8_t rate;   // one of 3 rates (0 - 2)
	uint8_t dir;    // 0 = cw, 1 = ccw
} sMsgGetJogData;

typedef struct
{
	uint8_t cmd;
	uint8_t datalen;
	uint8_t pressed[MAX_KEY_ACTIONS];
	uint8_t released[MAX_KEY_ACTIONS];
	uint16_t jog_angle;
	uint16_t jog_rpm;
} sMsgKeyActions;

typedef struct
{
	uint8_t cmd;
	uint8_t datalen;
	uint8_t saveres;
} sMsgSaveResults;

typedef struct
{
	uint8_t cmd;
	uint8_t datalen;
	uint8_t ver_major;
	uint8_t ver_minor;
} sMsgVersion;




#endif
